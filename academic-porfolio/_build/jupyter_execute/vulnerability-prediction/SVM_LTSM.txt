import pandas as pd 
import os
import numpy as np
from sklearn.preprocessing import LabelEncoder,  OneHotEncoder
import argparse
from sklearn.metrics import accuracy_score
from sklearn.metrics import roc_curve
from sklearn.metrics import auc
from sklearn import datasets, metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve

def load_data(path, column, rdm_state):
    dataframe = pd.read_csv(path)
    y = dataframe[column].astype(int) # numberize the labels i.e., tranforms True = 1, False = 0
    print("Label Distribution: ")
    print(y.value_counts())
    y = y.values 
    X = dataframe.iloc[:, 7:]
    num_features = len(X.columns) 
    X = X.values
    print("Dataset: ")
    print(f"\nShape of features: {X.shape} (# samples, # features, channel) of type {type(X)}" )
    print(f"Shape of labels: {y.shape} (# samples, ) of type {type(X)}" )
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=rdm_state)
    return X_train, X_test, y_train, y_test

X_cwe_119_train, X_cwe_119_test, y_cwe_119_train, y_cwe_119_test = load_data('cwe_119_train.csv', 'CWE-119', 42)
X_cwe_120_train, X_cwe_120_test, y_cwe_120_train, y_cwe_120_test = load_data('cwe_120_train.csv','CWE-120',42)
X_cwe_469_train, X_cwe_469_test, y_cwe_469_train, y_cwe_469_test = load_data('cwe_469_train.csv','CWE-469',42)
X_cwe_476_train, X_cwe_476_test, y_cwe_476_train, y_cwe_476_test = load_data('cwe_476_train.csv','CWE-476',42)
X_cwe_other_train, X_cwe_other_test, y_cwe_other_train, y_cwe_other_test = load_data('cwe_other_train.csv','CWE-other',42)

def predict_report(train_x,test_x,train_y,test_y):
  svm_model = svm.SVC(decision_function_shape='ovo')  # ovo for classification
  svm_model = svm_model.fit(train_x, train_y)
  y_predict = svm_model.predict(test_x)
  print("Accuracy score %.3f" %metrics.accuracy_score(test_y, y_predict))
  print(classification_report(test_y, y_predict))

print("CWE 119")
predict_report(X_cwe_119_train, X_cwe_119_test, y_cwe_119_train, y_cwe_119_test) ##cwe 119
print("CWE 120")
predict_report(X_cwe_120_train, X_cwe_120_test, y_cwe_120_train, y_cwe_120_test) ##cwe 120
print("CWE 469")
predict_report(X_cwe_469_train, X_cwe_469_test, y_cwe_469_train, y_cwe_469_test) ##cwe 469
print("CWE 476")
predict_report(X_cwe_476_train, X_cwe_476_test, y_cwe_476_train, y_cwe_476_test) ##cwe 476
print("CWE other")
predict_report(X_cwe_other_train, X_cwe_other_test, y_cwe_other_train, y_cwe_other_test) ##cwe other

from sklearn import svm
from sklearn import metrics
svm_model = svm.SVC(decision_function_shape='ovo')  # ovo for classification
svm_model = svm_model.fit(X_cwe_476_train, y_cwe_476_train)

def generate_roc_plot(model, x_test, y_test):
  # Generate a prediction using model.predict() 
  # and calculate it's shape:
  print("Generate a prediction")
  prediction = model.predict(x_test).ravel()
  print("prediction shape:", prediction.shape)

  fpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, prediction)
  auc_keras = auc(fpr_keras, tpr_keras)

  #generate plot
  plt.figure(1)
  plt.plot([0, 1], [0, 1], 'k--')
  plt.plot(fpr_keras, tpr_keras, label=' (area = {:.3f})'.format(auc_keras))
  plt.xlabel('False positive rate')
  plt.ylabel('True positive rate')
  plt.title('ROC curve')
  plt.legend(loc='best')
  plt.show()

  
generate_roc_plot(svm_model, X_cwe_476_test, y_cwe_476_test)

from sklearn import svm
from sklearn import metrics
def generate_roc_plots(x_train,y_train,x_test, y_test, names):
    fpr, tpr, aucs = [], [], []
    for i in range(5):
        svm_model = svm.SVC(decision_function_shape='ovo')  # ovo for classification
        svm_model = svm_model.fit(x_train[i], y_train[i])
        pred = svm_model.predict(x_test[i])
        print("Accuracy score %.3f" %metrics.accuracy_score(y_test[i], pred))
        print(classification_report(y_test[i], pred))
        fpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test[i], pred)
        auc_keras = auc(fpr_keras, tpr_keras)
        fpr.append(fpr_keras)
        tpr.append(tpr_keras)
        aucs.append(auc_keras)
    #generate plot
    plt.figure(figsize=(9,9))
    plt.plot([0, 1], [0, 1], 'k--')
    for i in range(5):
        plt.plot(fpr[i], tpr[i], label=' {} (area = {:.3f})'.format(names[i],aucs[i]))
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC curve')
    plt.legend(loc='best')
    plt.show()

x_tests = [X_cwe_119_test, X_cwe_other_test, X_cwe_120_test, X_cwe_469_test, X_cwe_476_test]
x_trains = [X_cwe_119_train,X_cwe_other_train,X_cwe_120_train,X_cwe_469_train, X_cwe_476_train]
y_trains = [y_cwe_119_train,y_cwe_other_train,y_cwe_120_train,y_cwe_469_train,y_cwe_476_train]
y_tests = [y_cwe_119_test, y_cwe_other_test, y_cwe_120_test, y_cwe_469_test, y_cwe_476_test]
names = ['CWE-119', 'CWE-Oth', 'CWE-120', 'CWE-469','CWE-476']
generate_roc_plots(x_trains,y_trains,x_tests, y_tests, names)

def predict_report(train_x,test_x,train_y,test_y):
  svm_model = svm.SVC(decision_function_shape='ovo')  # ovo for classification
  svm_model = svm_model.fit(train_x, train_y)
  y_predict = svm_model.predict(test_x)
  print("Accuracy score %.3f" %metrics.accuracy_score(test_y, y_predict))
  print(classification_report(test_y, y_predict))

print("CWE 119")
predict_report(X_cwe_119_train, X_cwe_119_test, y_cwe_119_train, y_cwe_119_test) ##cwe 119
print("CWE 120")
predict_report(X_cwe_120_train, X_cwe_120_test, y_cwe_120_train, y_cwe_120_test) ##cwe 120
print("CWE 469")
predict_report(X_cwe_469_train, X_cwe_469_test, y_cwe_469_train, y_cwe_469_test) ##cwe 469
print("CWE 476")
predict_report(X_cwe_476_train, X_cwe_476_test, y_cwe_476_train, y_cwe_476_test) ##cwe 476
print("CWE other")
predict_report(X_cwe_other_train, X_cwe_other_test, y_cwe_other_train, y_cwe_other_test) ##cwe other

##LTSM

from keras.layers import Dense, Dropout, LSTM, Embedding
from keras.models import Sequential

def load_data(path, column, rdm_state):
    dataframe = pd.read_csv(path)
    y = dataframe[column].astype(int) # numberize the labels i.e., tranforms True = 1, False = 0
    print("Label Distribution: ")
    print(y.value_counts())
    y = y.values 
    X = dataframe.iloc[:, 7:]
    num_features = len(X.columns) 
    X = X.values
    print("Dataset: ")
    print(f"\nShape of features: {X.shape} (# samples, # features, channel) of type {type(X)}" )
    print(f"Shape of labels: {y.shape} (# samples, ) of type {type(X)}" )
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10, random_state=rdm_state)
    return X,X_train, X_test, y_train, y_test

x_119,X_cwe_119_train, X_cwe_119_test, y_cwe_119_train, y_cwe_119_test = load_data('cwe_119_train.csv', 'CWE-119', 42)
x_120,X_cwe_120_train, X_cwe_120_test, y_cwe_120_train, y_cwe_120_test = load_data('cwe_120_train.csv','CWE-120',42)
x_469,X_cwe_469_train, X_cwe_469_test, y_cwe_469_train, y_cwe_469_test = load_data('cwe_469_train.csv','CWE-469',42)
x_476,X_cwe_476_train, X_cwe_476_test, y_cwe_476_train, y_cwe_476_test = load_data('cwe_476_train.csv','CWE-476',42)
x_other,X_cwe_other_train, X_cwe_other_test, y_cwe_other_train, y_cwe_other_test = load_data('cwe_other_train.csv','CWE-other',42)

model = Sequential()
model.add(LSTM(100, activation='tanh',input_shape=(x_119.shape[1],1)))
model.add(Dense(1,activation='sigmoid'))
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.fit(X_cwe_119_train, y_cwe_119_train,epochs=5,batch_size=64,verbose=2)
scores = model.evaluate(X_cwe_119_test, y_cwe_119_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

model = Sequential()
model.add(LSTM(100, activation='tanh',input_shape=(x_120.shape[1],1)))
model.add(Dense(1,activation='sigmoid'))
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.fit(X_cwe_120_train, y_cwe_120_train,epochs=5,batch_size=64,verbose=2)
scores = model.evaluate(X_cwe_120_test, y_cwe_120_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

model = Sequential()
model.add(LSTM(100, activation='tanh',input_shape=(x_469.shape[1],1)))
model.add(Dense(1,activation='sigmoid'))
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.fit(X_cwe_469_train, y_cwe_469_train,epochs=5,batch_size=64,verbose=2)
scores = model.evaluate(X_cwe_469_test, y_cwe_469_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

model = Sequential()
model.add(LSTM(100, activation='tanh',input_shape=(x_476.shape[1],1)))
model.add(Dense(1,activation='sigmoid'))
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.fit(X_cwe_476_train, y_cwe_476_train,epochs=5,batch_size=64,verbose=2)
scores = model.evaluate(X_cwe_476_test, y_cwe_476_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

model = Sequential()
model.add(LSTM(100, activation='tanh',input_shape=(x_other.shape[1],1)))
model.add(Dense(1,activation='sigmoid'))
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.fit(X_cwe_other_train, y_cwe_other_train,epochs=5,batch_size=64,verbose=2)
scores = model.evaluate(X_cwe_other_test, y_cwe_other_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))
